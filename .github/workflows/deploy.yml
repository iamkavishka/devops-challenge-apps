# This pipeline will build Docker images, push them to Azure Container Registry (ACR), and deploy to Azure Container Apps.

name: Deploy Web App and API to Azure

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to Azure
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 3: Log in to Azure Container Registry (ACR)
      - name: Log in to ACR
        run: |
          docker login ${{ env.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }}

      # Step 4: Build and push the Web App Docker image
      - name: Build and push Web App image
        run: |
          cd webapp
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/webapp:latest .
          docker push ${{ env.ACR_LOGIN_SERVER }}/webapp:latest

      # Step 5: Build and push the API Docker image
      - name: Build and push API image
        run: |
          cd api
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/api:latest .
          docker push ${{ env.ACR_LOGIN_SERVER }}/api:latest

      # Step 6: Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # Step 7: Terraform Init
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
        env:
          ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

      # Step 8: Terraform Apply
      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve
        env:
          ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

env:
  ACR_LOGIN_SERVER: wireappsacr<random>.azurecr.io  # should be replaced with the ACR login server
